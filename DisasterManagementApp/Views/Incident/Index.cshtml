@model IEnumerable<Incident>

@{
    ViewData["Title"] = "Incident List";

    // Get RoleId from ViewBag
    var roleId = ViewBag.RoleId as int?;
}

<center><h2>Incident List</h2></center>
<style>
    body {
        background: linear-gradient(180deg, #dee1d4, #dfe7cb);
    }

    /* Glassmorphism styles for cards */
    .card {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        backdrop-filter: blur(15px);
        -webkit-backdrop-filter: blur(15px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        overflow: hidden;
    }

    .card-body {
        color: #343a40;
    }

    .card-footer {
        border-top: 1px solid rgba(255, 255, 255, 0.3);
    }

    h5.card-title {
        font-weight: bold;
    }

    .image-container {
        border-radius: 8px;
        overflow: hidden;
    }
</style>

<!-- Search input for live search -->
<div class="mb-3 d-flex justify-content-center">
    <div class="col-md-6">
        <input type="text" id="searchInput" class="form-control" placeholder="Search by title..." />
    </div>
</div>

<!-- Container to display incidents as cards -->
<div class="row row-cols-1 row-cols-md-3 g-3" id="results">
    <!-- The cards will be updated dynamically based on the search -->
    @foreach (var item in Model)
    {
        <div class="col-md-4 mb-3">
            <div class="card">
                <div class="card-body" style="min-height: 250px;">
                    <h5 class="card-title">@item.Title</h5>
                    <p class="card-text">@item.Description</p>
                    <p class="card-text"><small class="text-muted">Date Reported: @item.DateReported.ToString("g")</small></p>
                    <div>
                        @if (!string.IsNullOrEmpty(item.FileUrl))
                        {
                            <!-- Container for the image and loader -->
                            <div class="image-container" style="position: relative; width: 100%; height: 200px; display: flex; align-items: center; justify-content: center; overflow: hidden;">
                                <!-- Loader placeholder -->
                                <div class="loader" style="display: flex; align-items: center; justify-content: center;">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>

                                <!-- Actual image with onload event -->
                                <img src="@item.FileUrl" alt="Incident Media" 
                                     style="max-width: 100%; max-height: 100%; display: none; object-fit: cover;"
                                     onload="this.style.display='block'; this.previousElementSibling.style.display='none';" />
                            </div>
                        }
                        else
                        {
                            <span>No media</span>
                        }
                    </div>
                </div>
                <div class="card-footer">
                    <!-- Display Create Alert button only if RoleId is 2 -->
                    @if (roleId == 2)
                    {
                        <a asp-controller="Alert" asp-action="Create" asp-route-incidentId="@item.IncidentId" class="btn btn-sm btn-success">Create Alert</a>
                    }
                    <!-- Delete incident link -->
                    <a asp-action="Delete" asp-route-incidentId="@item.IncidentId" class="btn btn-sm btn-danger">Delete</a>
                </div>
            </div>
        </div>
    }
</div>

<!-- Container for "No results found" message -->
<div id="no-results-message" style="display: none;">
    <p>No incidents found.</p>
</div>

<!-- Container for the graph -->
<div class="my-5">
    <h4 class="text-center">Incident Statistics</h4>
    <canvas id="incidentChart" width="400" height="200"></canvas>
</div>

@section Scripts {
    <!-- jQuery for search functionality -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <!-- Chart.js for graph -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        // Implement search functionality
        document.getElementById('searchInput').addEventListener('input', function () {
            const searchTerm = this.value.toLowerCase();
            const incidents = document.querySelectorAll('#results .col-md-4');

            // Filter incidents based on search term
            incidents.forEach(function (incident) {
                const title = incident.querySelector('.card-title').textContent.toLowerCase();
                if (title.includes(searchTerm)) {
                    incident.style.display = '';
                } else {
                    incident.style.display = 'none';
                }
            });

            // Display "No results found" message if no incidents match the search
            const visibleIncidents = [...incidents].filter(incident => incident.style.display === '');
            document.getElementById('no-results-message').style.display = visibleIncidents.length ? 'none' : 'block';
        });

        // Prepare the data for the chart
        const incidentData = @Html.Raw(Json.Serialize(Model.GroupBy(i => i.DateReported.ToString("MMMM")).Select(g => new { month = g.Key, count = g.Count() })));

        const labels = incidentData.map(data => data.month);
        const counts = incidentData.map(data => data.count);

        // Create the graph using Chart.js
        const ctx = document.getElementById('incidentChart').getContext('2d');
        const incidentChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Number of Incidents',
                    data: counts,
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    </script>
}
